#!/usr/bin/env node

var path = require('path')
var configLib = require(path.join(__dirname, '../lib/config.js'))
var nopt = require('nopt')
var noptUsage = require('nopt-usage')
var shelljs = require('shelljs')

var knownOpts = {
  'benchmark': [String, Array],
  'clean': Boolean,
  'compiler': [String, Array],
  'experiment': String,
  'help': Boolean,
  'implementation': [String, Array],
  'input-size': [String],
  'root': String,
  'verbose': Boolean
}
var shortHands = {
  'b': ['--benchmark'],
  'c': ['--compiler'],
  'e': ['--experiment'],
  'h': ['--help'],
  'i': ['--implementation'],
  'is': ['--input-size'],
  'v': ['--verbose']
}

// Parse for options that do not need the configuration info
var parsed = nopt(knownOpts, shortHands)
if (!parsed.root) {
  console.log('fatal: No benchmarking suite root directory provided')
  process.exit(1)
} else {
  var suiteRoot = path.resolve(process.cwd(), parsed.root)
}

if (parsed.clean) {
  shelljs.rm('-rf', path.join(suiteRoot, '/builds'))
  process.exit(0)
}

// Other stuff that need the configuration info
configLib.config(suiteRoot, function (err, config) {
  if (err) {
    console.log(err)
    process.exit(1)
  }

  var description = {
    'benchmark': 'One of [' + config['benchmark-list'] + '], repeat to specify multiple benchmarks',
    'compiler': 'One of [' + config['compiler-list'] + '], repeat to specify multiple compilers',
    'experiment': 'Path to experiment configuration file',
    'help': 'Display this help',
    'implementation': 'One of [' + config['implementation-list'] + '], repeat to specify multiple implementations'
  }

  if (parsed.help) {
    var usage = noptUsage(knownOpts, shortHands, description)
    console.log(usage)
    process.exit(1)
  }

  configLib.extractShortNames(config, parsed)

  configLib.genBuildConfigurations(config, {
    benchmarks: parsed.benchmarks.length > 0 ? parsed.benchmarks : config['benchmarks-list'],
    implementations: parsed.implementations.length > 0 ? parsed.implementations : config['implementation-list'],
    compilers: parsed.compilers.length > 0 ? parsed.compilers : config['compiler-list'],
    experiment: {
      'type': 'experiment',
      'short-name': 'default',
      'input-size': parsed['input-size'] || 'medium'
    }
  }).forEach(function (config) {
    configLib.createRunner(config, parsed)
  })
})
